/*
 * Helvetica de base n'a pas de font-weight en dessous de 400.
 */
/* Remettre à zéro pour simplifier les choses */
* {
    padding: 0;
    margin: 0;
    -moz-box-sizing: content-box;
    -webkit-box-sizing: content-box;
    box-sizing: border-box;
}
/* Variables et styles globaux */
:root {
    font-family: 'Roboto', Helvetica, Arial, sans-serif;
    font-size: 16px;
    font-weight: 400;
    line-height: 180%;
    color: #000000;
    --main-accent: #9DD129;
    --grey: #D0D0D0;
    --light-grey: #EFEFEF;
}
@media (max-width: 768px) {
    :root {
        font-size: 14px;
    }
}
@media (min-width: 1024px) {
    :root {
        font-size: 18px;
    }
}
h1, h2 {
    font-weight: 700;
    text-transform: uppercase;
}
body {
    min-height: 100vh;
}
label {
    line-height: 80%;
}
/* layout */
.header-img {
    width: 100%;
    height: 374px;
    object-fit: cover;
    object-position: 100% 30%;
}
main {
    background-color: #fff;
    max-width: 1440px;
    margin: 0 auto;
}
.container {
    display: flex;
    justify-content: center;
    gap: 4rem;
}
.side-text {
    padding-top: 6rem;
    max-width: 382px;
    & > *:not(:last-child) {
        margin-bottom: .5rem;
    }
}
.side-links {
    display: flex;
    align-items: center;
    gap: .25rem;
}
.form {
    background: #fff;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    max-width: 584px;
    width: 50vw;
    min-width: 384px;
    padding: 2rem 3rem 4rem;
    box-shadow: 0 4px 28px 0 #1C85A621;
    border-radius: .5rem;
    /* 0.5rem */
    transform: translateY(-4rem);
}
.form-header {}
.form-footer {
    display: flex;
    flex-direction: row;
    gap: 1rem;
    font-weight: 300;
    font-size: 14px;
    align-items: center;
    label {
        line-height: 180%;
    }
}
/*
 * Pour l'effet slide sur le bouton, j'ai utilisé un pseudo-element before qui permet d'avoir un fond vert derrière l'option séléctionnée, 
 * que je peux facilement déplacer dans la flexbox, tout en gardant la possibilité d'ajouter une transition.
 * Ainsi qu'un petit script javascript pour ajouter une classe .active sur l'option séléctionnée
 *
 * Pour le svg, j'ai utlisé un élément img pour la lisibité, ce qui veut aussi dire que je ne peux pas directement manipuler la couleur en CSS
 * du coup, j'ai utilisé un filtre invert
 *
 */
.slide-button {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: space-between;
    align-self: flex-start;
    margin: 2rem 0;
    background: var(--light-grey);
    border-radius: 2rem;
    cursor: pointer;
    z-index: 0;
    user-select: none;
    & > div {
        display: flex;
        gap: .5rem;
        padding: .25rem 1.5rem;
    }
    & > .svg {
        width: 24px;
        height: 24px;
    }
    &::before {
        content: '';
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        width: 50%;
        border-radius: inherit;
        z-index: -1;
        background: var(--main-accent);
        transition: transform .2s cubic-bezier(0.8, 0, 0.2, 1);
    }
}
.slide-button .active {
    color: #fff;
    border-radius: inherit;
}
.slide-button:has(:last-child.active)::before {
    transform: translateX(100%);
}
form {
    display: flex;
    flex-direction: column;
    flex: 1;
    gap: 2rem;
}
input {
    border: none;
    height: 2rem;
    border-bottom: 1.5px solid var(--grey);
}
button[type=submit] {
    all: unset;
    align-self: center;
    padding: .75rem 2.5rem;
    color: #fff;
    font-size: 24px;
    background: var(--main-accent);
    border-radius: 3rem;
}
input[type=checkbox] {
    appearance: none;
    position: relative;
    flex-shrink: 0;
    cursor: pointer;
    border: var(--main-accent) 2px solid;
    border-radius: 4px;
    width: 18px;
    height: 18px;
    filter: drop-shadow(0 4px 4px #00000040);
    &::before {
        content: '';
        position: absolute;
        top: 10%;
        left: 10%;
        width: 80%;
        height: 80%;
        background: inherit;
        border-radius: 2px;
    }
    &:hover:not(:checked)::before {
        filter: opacity(40%);
        background-color: var(--main-accent);
    }
    &:checked::before {
        background-color: var(--main-accent);
    }
}
label:has(+ input[required])::after {
    content: '*';
}
/* classes réutilisables */
.form-group {
    flex: 1;
    display: flex;
    flex-direction: column;
}
.form-row {
    gap: 3rem;
    display: flex;
}
.underlined {
    text-decoration: underline;
}
.text-light {
    font-weight: 300;
}
/* switch de noir à blanc, en m'évitant de devoir insérer le svg en tant que balise dans l'HTML */
.active > .svg {
    filter: invert();
}
.icon-link {
    padding: .25rem;
    line-height: 0;
}
.icon-link:hover {
    background: #0001;
    border-radius: 4px;
}
/* responsive */
@media (max-width: 1024px) {
    .container {
        gap: 2rem;
    }
    .form-row {
        gap: inherit;
        flex-direction: column;
    }
}
@media (max-width: 768px) {
    .container {
        flex-direction: column;
        align-items: center;
        gap: 6rem;
    }
    .form {
        box-shadow: none;
        transform: none;
        /* padding: 0; */
        padding-bottom: 6rem;
        min-width: 0px;
        width: 100%;
    }
    .form-row {
        flex-direction: row;
        gap: 3rem;
    }
    .header-img {
        max-height: 256px;
    }
}
@media (max-width: 512px) {
    .slide-button {
        align-self: center;
    }
    .side-text {
        padding: 2rem;
    }
    .container {
        gap: 0;
    }
    .form {
        padding: 2rem;
    }
    .form-row {
        gap: inherit;
        flex-direction: column;
    }
    .header-img {
        max-height: 128px;
    }
}